{"version":3,"sources":["components/card/index.tsx","pages/index/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","className","href","target","title","description","App","path","component","Index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TASe,SAASA,EAAKC,GAC3B,OACE,uBAAGC,UAAU,OAAOC,KAAMF,EAAMG,QAC9B,6BACE,yBAAKF,UAAU,eACZD,EAAMI,OACL,0BAAMH,UAAU,sBAAsBD,EAAMI,QAGhD,yBAAKH,UAAU,gBACb,0BAAMA,UAAU,6BAA6BD,EAAMK,cAErD,yBAAKJ,UAAU,kB,UCjBR,aACb,OACE,yBAAKA,UAAU,SACb,kBAACF,EAAD,CACEK,MAAM,UACND,OAAO,qCACPE,YAAY,uJAEd,kBAACN,EAAD,CACEK,MAAM,gBACND,OAAO,2CACPE,YAAY,0HAEd,kBAACN,EAAD,CACEK,MAAM,qBACND,OAAO,gDACPE,YAAY,4VAEd,kBAACN,EAAD,CAAMK,MAAM,OAAOD,OAAO,QAAQE,YAAY,2DAC9C,kBAACN,EAAD,CAAMK,MAAM,QAAQC,YAAY,sD,MCVvBC,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWC,MCIbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d55ee4f5.chunk.js","sourcesContent":["import React from 'react';\nimport './index.scss';\n\ntype Props = {\n  title?: string;\n  target?: string;\n  description?: string;\n};\n\nexport default function Card(props: Props) {\n  return (\n    <a className=\"card\" href={props.target}>\n      <div>\n        <div className=\"card-header\">\n          {props.title && (\n            <span className=\"card-header__title\">{props.title}</span>\n          )}\n        </div>\n        <div className=\"card-content\">\n          <span className=\"card-content__description\">{props.description}</span>\n        </div>\n        <div className=\"card-footer\"></div>\n      </div>\n    </a>\n  );\n}\n","import React from 'react';\nimport Card from '../../components/card';\nimport './index.scss';\n\nexport default function () {\n  return (\n    <div className=\"index\">\n      <Card\n        title=\"Imaging\"\n        target=\"https://github.com/minetsh/Imaging\"\n        description=\"Android 端，图片编辑、涂鸦、马赛克、文字、贴图、裁剪库\"\n      />\n      <Card\n        title=\"PopupMenuView\"\n        target=\"https://github.com/minetsh/PopupMenuView\"\n        description=\"一个类似 iOS 中弹框气泡菜单（UIMenuController）的控件\"\n      />\n      <Card\n        title=\"IntensifyImageView\"\n        target=\"https://github.com/minetsh/IntensifyImageView\"\n        description=\"Picture Preview Lib，用于显示原图级别的图片预览库，大图显示，大图预览，大图加载，类似微博长图，宽图，可用于显示大分辨率图片等。\"\n      />\n      <Card title=\"Json\" target=\"/json\" description=\"在线解析 Json 对象工具\" />\n      <Card title=\"About\" description=\"Felix 大前端，minxtth@gmail.com\" />\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Index from './pages/index';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" component={Index} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}