{"version":3,"sources":["tools/json/core/json-render.ts","tools/json/core/json.ts","tools/json/core/json-element.ts","tools/json/core/json-object.ts","tools/json/core/json-array.ts","tools/json/components/json-view/index.tsx","tools/json/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["JsonRender","es","this","push","React","createElement","key","uid","deepth","repeat","style","color","value","elements","concat","sub","v","JsonTypes","JsonElement","props","type","children","jsonType","render","create","space","string","number","boolean","null","length","size","array","object","JsonObject","entries","Object","map","toJsonElement","append","br","isEmpty","forEach","child","index","JsonArray","undefined","Array","isArray","Error","renderJsonElement","JsonView","useState","setValue","useEffect","json","JSON","parse","e","renderJson","className","JsonToolPage","setJson","placeholder","onChange","target","App","path","component","Json","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e5126ed.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class JsonRender {\n  private static uid = 0;\n  private es: any[] = [];\n\n  public br(): JsonRender {\n    this.es.push(\n      React.createElement('br', {\n        key: JsonRender.uid++,\n      }),\n    );\n    return this;\n  }\n\n  public space(deepth: number): JsonRender {\n    this.es.push(' '.repeat(deepth << 1));\n    return this;\n  }\n\n  public key(key?: string): JsonRender {\n    if (key != null) {\n      this.es.push(\n        React.createElement(\n          'span',\n          { key: JsonRender.uid++, style: { color: '#92278f' } },\n          `\"${key}\"`,\n        ),\n        ': ',\n      );\n    }\n    return this;\n  }\n\n  public string(value?: string): JsonRender {\n    this.es.push(\n      React.createElement(\n        'span',\n        { key: JsonRender.uid++, style: { color: '#3ab54a' } },\n        `\"${value}\"`,\n      ),\n    );\n    return this;\n  }\n\n  public number(value?: number): JsonRender {\n    this.es.push(\n      React.createElement(\n        'span',\n        { key: JsonRender.uid++, style: { color: '#25aae2' } },\n        `${value}`,\n      ),\n    );\n    return this;\n  }\n\n  public boolean(value?: boolean): JsonRender {\n    this.es.push(\n      React.createElement(\n        'span',\n        { key: JsonRender.uid++, style: { color: '#f98280' } },\n        `${value}`,\n      ),\n    );\n    return this;\n  }\n\n  public null(value?: string): JsonRender {\n    this.es.push(\n      React.createElement(\n        'span',\n        { key: JsonRender.uid++, style: { color: '#f1592a' } },\n        `${value}`,\n      ),\n    );\n    return this;\n  }\n\n  public elements(elements: any[]): JsonRender {\n    this.es = this.es.concat(elements);\n    return this;\n  }\n\n  public sub(sub: JsonRender): JsonRender {\n    this.elements(sub.es);\n    return this;\n  }\n\n  public append(v: string): JsonRender {\n    this.es.push(v);\n    return this;\n  }\n\n  public render(): React.DOMElement<any, any> {\n    return React.createElement('span', { key: JsonRender.uid++ }, this.es);\n  }\n\n  public static create(): JsonRender {\n    return new JsonRender();\n  }\n}\n","import JsonElement from './json-element';\nimport JsonObject from './json-object';\nimport JsonArray from './json-array';\n\nexport type JsonType =\n  | boolean\n  | string\n  | number\n  | object\n  | Array<JsonType>\n  | null;\n\nexport enum JsonTypes {\n  null = 'null',\n  boolean = 'boolean',\n  number = 'number',\n  string = 'string',\n  array = 'array',\n  object = 'object',\n}\n\nexport const jsonType = (value: JsonType): JsonTypes => {\n  const type = typeof value;\n  if (type === JsonTypes.string) {\n    return JsonTypes.string;\n  }\n  if (type === JsonTypes.number) {\n    return JsonTypes.number;\n  }\n  if (type === JsonTypes.boolean) {\n    return JsonTypes.boolean;\n  }\n  if (Array.isArray(value)) {\n    return JsonTypes.array;\n  }\n  if (type === JsonTypes.object) {\n    if (value === null) {\n      return JsonTypes.null;\n    }\n    return JsonTypes.object;\n  }\n  throw new Error(`未知类型错误：${value}`);\n};\n\nexport function toJsonElement(\n  value: JsonType,\n  key?: string,\n  deepth: number = 0,\n) {\n  const type = jsonType(value);\n  switch (type) {\n    case JsonTypes.string:\n    case JsonTypes.number:\n    case JsonTypes.boolean:\n    case JsonTypes.null:\n      return new JsonElement({ key, value, type, deepth });\n    case JsonTypes.object:\n      return new JsonObject({ key, value, type, deepth } as any);\n    case JsonTypes.array:\n      return new JsonArray({ key, value, type, deepth } as any);\n  }\n}\n\nexport function renderJsonElement(\n  value: JsonType,\n  key?: string,\n  deepth: number = 0,\n) {\n  return toJsonElement(value, key, deepth).render();\n}\n\nexport function renderJson(json?: string) {\n  try {\n    if (json || json === null) {\n      return renderJsonElement(JSON.parse(json));\n    }\n  } catch (e) {\n    return renderJsonElement(`${e}`);\n  }\n}\n","import JsonRender from './json-render';\nimport { JsonType, JsonTypes, jsonType } from './json';\n\nexport interface JsonElementProps<T extends JsonType = JsonType> {\n  key?: string;\n  value: T;\n  type?: JsonTypes;\n  deepth?: number;\n}\n\nexport default class JsonElement<T extends JsonType = JsonType> {\n  public key?: string;\n\n  public value?: T;\n\n  public deepth: number;\n\n  public type: JsonTypes;\n\n  public children: Array<JsonElement<JsonType>> = [];\n\n  constructor(props: JsonElementProps<T>) {\n    this.key = props.key;\n    this.value = props.value;\n    this.type = props.type || jsonType(this.value);\n    this.deepth = props.deepth || 0;\n  }\n\n  get size(): number {\n    return this.children.length;\n  }\n\n  get isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  get isArray(): boolean {\n    return this.type === JsonTypes.array;\n  }\n\n  get isObject(): boolean {\n    return this.type === JsonTypes.object;\n  }\n\n  public render(): JsonRender {\n    const render = JsonRender.create().space(this.deepth).key(this.key);\n    switch (this.type) {\n      case JsonTypes.string:\n        render.string(this.value as any);\n        break;\n      case JsonTypes.number:\n        render.number(this.value as any);\n        break;\n      case JsonTypes.boolean:\n        render.boolean(this.value as any);\n        break;\n      case JsonTypes.null:\n        render.null(this.value as any);\n        break;\n    }\n    return render;\n  }\n}\n","import JsonRender from './json-render';\nimport JsonElement, { JsonElementProps } from './json-element';\nimport { JsonType, toJsonElement } from './json';\n\nexport interface JsonObjectProps<T extends object>\n  extends JsonElementProps<T> {}\n\nexport default class JsonObject<T extends object> extends JsonElement<T> {\n  public children: Array<JsonElement<JsonType>> = [];\n\n  constructor(props: JsonObjectProps<T>) {\n    super(props);\n    if (this.value) {\n      const entries = Object.entries(this.value);\n      this.children = entries.map(([key, value]) =>\n        toJsonElement(value, key, this.deepth + 1),\n      );\n    }\n  }\n\n  public render(): JsonRender {\n    const render = JsonRender.create()\n      .space(this.deepth)\n      .key(this.key)\n      .append('{')\n      .br();\n    if (!this.isEmpty) {\n      this.children.forEach((child, index) => {\n        if (index > 0) {\n          render.append(',').br();\n        }\n        render.sub(child.render());\n      });\n    }\n    return render.br().space(this.deepth).append('}');\n  }\n}\n","import JsonRender from './json-render';\nimport JsonElement, { JsonElementProps } from './json-element';\nimport { JsonType, toJsonElement } from './json';\n\nexport interface JsonArrayProps extends JsonElementProps<Array<JsonType>> {}\n\nexport default class JsonArray extends JsonElement<Array<JsonType>> {\n  constructor(props: JsonArrayProps) {\n    super(props);\n    if (this.value) {\n      this.children = this.value.map((value) =>\n        toJsonElement(value, undefined, this.deepth + 1),\n      );\n    }\n  }\n\n  public render(): JsonRender {\n    const render = JsonRender.create()\n      .space(this.deepth)\n      .key(this.key)\n      .append('[')\n      .br();\n    if (!this.isEmpty) {\n      this.children.forEach((child, index) => {\n        if (index > 0) {\n          render.append(',').br();\n        }\n        render.sub(child.render());\n      });\n    }\n    return render.br().space(this.deepth).append(']');\n  }\n}\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { renderJson } from '../../core/json';\nimport './index.scss';\n\ntype Props = {\n  json?: string;\n};\n\nexport default function JsonView(props: Props) {\n  const [value, setValue] = useState<any>();\n\n  useEffect(() => {\n    setValue(renderJson(props.json));\n  }, [props.json]);\n\n  return (\n    <div className=\"json-view\">\n      <Fragment>{value && value.render()}</Fragment>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport JsonView from './components/json-view';\nimport './index.scss';\n\nexport default function JsonToolPage() {\n  const [json, setJson] = useState('');\n\n  const onInput = (e: any) => {\n    setJson(e.target.value);\n  };\n\n  return (\n    <div className=\"page\">\n      <header className=\"page-header\">\n        <span>Felix</span>\n      </header>\n      <div className=\"page-json\">\n        <div className=\"page-json-source\">\n          <textarea\n            className=\"page-json-source__text\"\n            placeholder=\"请输入 JSON 字符串\"\n            onChange={onInput}\n          />\n        </div>\n        <div className=\"page-json-render\">\n          <JsonView json={json} />\n        </div>\n      </div>\n      {/* <footer className=\"page-footer\">aaa</footer> */}\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n// import Index from './pages/index';\n// import Tetris from './pages/tetris';\nimport Json from './tools/json';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" component={Json} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}